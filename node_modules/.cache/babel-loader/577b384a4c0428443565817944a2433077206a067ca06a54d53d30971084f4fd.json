{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'sonner';\nexport const useUser = () => {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    setError,\n    formState: {\n      errors\n    }\n  } = useForm();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const checkEmailExists = (email, accounts) => {\n    return accounts.some(account => account.email === email);\n  };\n  const signUpUser = async data => {\n    console.log(data);\n    // Check if passwords match\n    if (data.password !== data.confirmPassword) {\n      setError('confirmPassword', {\n        message: 'Passwords do not match'\n      });\n      return;\n    }\n    let accounts = JSON.parse(localStorage.getItem('accounts')) || [];\n    if (checkEmailExists(data.email, accounts)) {\n      setErrorMessage('Email already registered.');\n      return;\n    }\n    accounts.push(data);\n    localStorage.setItem('accounts', JSON.stringify(accounts));\n    toast.success('Account successfully registered!');\n    reset();\n    setErrorMessage('');\n  };\n  const handleSignIn = data => {\n    let accounts = JSON.parse(localStorage.getItem('accounts')) || [];\n    console.log('Input email:', data.email);\n    console.log('Input password:', data.password);\n    const foundAccount = accounts.find(account => {\n      console.log('Account email:', account.email);\n      console.log('Account password:', account.password);\n      return account.email === data.email && account.password === data.password;\n    });\n    if (foundAccount) {\n      console.log('Successfully logged-in!');\n      toast.success('Successfully logged-in!');\n      setIsLoggedIn(true);\n      setErrorMessage('');\n      reset();\n    } else {\n      console.log('Login failed. No matching account found.');\n      setErrorMessage('Invalid email or password. Please try again.');\n    }\n  };\n  const handleSignOut = () => {\n    setIsLoggedIn(false);\n  };\n  return {\n    isLoggedIn,\n    errorMessage,\n    signUpUser: handleSubmit(signUpUser),\n    handleSignIn: handleSubmit(handleSignIn),\n    handleSignOut,\n    register,\n    watch,\n    errors\n  };\n};\n_s(useUser, \"1UZsnM4MPMbx6AwEMarb/QDqbt4=\", false, function () {\n  return [useForm];\n});","map":{"version":3,"names":["useState","useForm","toast","useUser","_s","register","handleSubmit","reset","watch","setError","formState","errors","isLoggedIn","setIsLoggedIn","errorMessage","setErrorMessage","checkEmailExists","email","accounts","some","account","signUpUser","data","console","log","password","confirmPassword","message","JSON","parse","localStorage","getItem","push","setItem","stringify","success","handleSignIn","foundAccount","find","handleSignOut"],"sources":["C:/Users/User/Documents/GitHub/e-billing/src/hooks/useUser.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from 'sonner'\r\n\r\nexport const useUser = () => {\r\n    const { register, handleSubmit, reset, watch, setError, formState: { errors } } = useForm();\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const checkEmailExists = (email, accounts) => {\r\n        return accounts.some(account => account.email === email);\r\n    };\r\n\r\n    const signUpUser = async (data) => {\r\n        console.log(data);\r\n        // Check if passwords match\r\n        if (data.password !== data.confirmPassword) {\r\n            setError('confirmPassword', { message: 'Passwords do not match' });\r\n            return;\r\n        }\r\n\r\n        let accounts = JSON.parse(localStorage.getItem('accounts')) || [];\r\n\r\n        if (checkEmailExists(data.email, accounts)) {\r\n            setErrorMessage('Email already registered.');\r\n            return;\r\n        }\r\n\r\n        accounts.push(data);\r\n        localStorage.setItem('accounts', JSON.stringify(accounts));\r\n\r\n        toast.success('Account successfully registered!');\r\n        reset();\r\n        setErrorMessage('');\r\n    };\r\n\r\n\r\n    const handleSignIn = (data) => {\r\n        let accounts = JSON.parse(localStorage.getItem('accounts')) || [];\r\n        \r\n        console.log('Input email:', data.email);\r\n        console.log('Input password:', data.password);\r\n    \r\n        const foundAccount = accounts.find(account => {\r\n            console.log('Account email:', account.email);\r\n            console.log('Account password:', account.password);\r\n            return account.email === data.email && account.password === data.password;\r\n        });\r\n    \r\n        if (foundAccount) {\r\n            console.log('Successfully logged-in!');\r\n            toast.success('Successfully logged-in!');\r\n            setIsLoggedIn(true);\r\n            setErrorMessage('');\r\n            reset();\r\n        } else {\r\n            console.log('Login failed. No matching account found.');\r\n            setErrorMessage('Invalid email or password. Please try again.');\r\n        }\r\n    };\r\n    \r\n    \r\n        \r\n\r\n    const handleSignOut = () => {\r\n        setIsLoggedIn(false);\r\n    };\r\n\r\n    return {\r\n        isLoggedIn,\r\n        errorMessage,\r\n        signUpUser: handleSubmit(signUpUser), \r\n        handleSignIn: handleSubmit(handleSignIn),\r\n        handleSignOut,\r\n        register,\r\n        watch,\r\n        errors,\r\n    };\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}