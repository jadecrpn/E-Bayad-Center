{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  handleClientScriptLoad: null,\n  initScriptLoader: null,\n  default: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  handleClientScriptLoad: function () {\n    return handleClientScriptLoad;\n  },\n  initScriptLoader: function () {\n    return initScriptLoader;\n  },\n  default: function () {\n    return _default;\n  }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _reactdom = /*#__PURE__*/_interop_require_default._(require(\"react-dom\"));\nconst _react = /*#__PURE__*/_interop_require_wildcard._(require(\"react\"));\nconst _headmanagercontextsharedruntime = require(\"../shared/lib/head-manager-context.shared-runtime\");\nconst _headmanager = require(\"./head-manager\");\nconst _requestidlecallback = require(\"./request-idle-callback\");\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst ignoreProps = [\"onLoad\", \"onReady\", \"dangerouslySetInnerHTML\", \"children\", \"onError\", \"strategy\", \"stylesheets\"];\nconst insertStylesheets = stylesheets => {\n  // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad\n  //\n  // Using ReactDOM.preinit to feature detect appDir and inject styles\n  // Stylesheets might have already been loaded if initialized with Script component\n  // Re-inject styles here to handle scripts loaded via handleClientScriptLoad\n  // ReactDOM.preinit handles dedup and ensures the styles are loaded only once\n  if (_reactdom.default.preinit) {\n    stylesheets.forEach(stylesheet => {\n      _reactdom.default.preinit(stylesheet, {\n        as: \"style\"\n      });\n    });\n    return;\n  }\n  // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad\n  //\n  // We use this function to load styles when appdir is not detected\n  // TODO: Use React float APIs to load styles once available for pages dir\n  if (typeof window !== \"undefined\") {\n    let head = document.head;\n    stylesheets.forEach(stylesheet => {\n      let link = document.createElement(\"link\");\n      link.type = \"text/css\";\n      link.rel = \"stylesheet\";\n      link.href = stylesheet;\n      head.appendChild(link);\n    });\n  }\n};\nconst loadScript = props => {\n  const {\n    src,\n    id,\n    onLoad = () => {},\n    onReady = null,\n    dangerouslySetInnerHTML,\n    children = \"\",\n    strategy = \"afterInteractive\",\n    onError,\n    stylesheets\n  } = props;\n  const cacheKey = id || src;\n  // Script has already loaded\n  if (cacheKey && LoadCache.has(cacheKey)) {\n    return;\n  }\n  // Contents of this script are already loading/loaded\n  if (ScriptCache.has(src)) {\n    LoadCache.add(cacheKey);\n    // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n    // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n    ScriptCache.get(src).then(onLoad, onError);\n    return;\n  }\n  /** Execute after the script first loaded */\n  const afterLoad = () => {\n    // Run onReady for the first time after load event\n    if (onReady) {\n      onReady();\n    }\n    // add cacheKey to LoadCache when load successfully\n    LoadCache.add(cacheKey);\n  };\n  const el = document.createElement(\"script\");\n  const loadPromise = new Promise((resolve, reject) => {\n    el.addEventListener(\"load\", function (e) {\n      resolve();\n      if (onLoad) {\n        onLoad.call(this, e);\n      }\n      afterLoad();\n    });\n    el.addEventListener(\"error\", function (e) {\n      reject(e);\n    });\n  }).catch(function (e) {\n    if (onError) {\n      onError(e);\n    }\n  });\n  if (dangerouslySetInnerHTML) {\n    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n    el.innerHTML = dangerouslySetInnerHTML.__html || \"\";\n    afterLoad();\n  } else if (children) {\n    el.textContent = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n    afterLoad();\n  } else if (src) {\n    el.src = src;\n    // do not add cacheKey into LoadCache for remote script here\n    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n    ScriptCache.set(src, loadPromise);\n  }\n  for (const [k, value] of Object.entries(props)) {\n    if (value === undefined || ignoreProps.includes(k)) {\n      continue;\n    }\n    const attr = _headmanager.DOMAttributeNames[k] || k.toLowerCase();\n    el.setAttribute(attr, value);\n  }\n  if (strategy === \"worker\") {\n    el.setAttribute(\"type\", \"text/partytown\");\n  }\n  el.setAttribute(\"data-nscript\", strategy);\n  // Load styles associated with this script\n  if (stylesheets) {\n    insertStylesheets(stylesheets);\n  }\n  document.body.appendChild(el);\n};\nfunction handleClientScriptLoad(props) {\n  const {\n    strategy = \"afterInteractive\"\n  } = props;\n  if (strategy === \"lazyOnload\") {\n    window.addEventListener(\"load\", () => {\n      (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));\n    });\n  } else {\n    loadScript(props);\n  }\n}\nfunction loadLazyScript(props) {\n  if (document.readyState === \"complete\") {\n    (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));\n  } else {\n    window.addEventListener(\"load\", () => {\n      (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));\n    });\n  }\n}\nfunction addBeforeInteractiveToCache() {\n  const scripts = [...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'), ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]')];\n  scripts.forEach(script => {\n    const cacheKey = script.id || script.getAttribute(\"src\");\n    LoadCache.add(cacheKey);\n  });\n}\nfunction initScriptLoader(scriptLoaderItems) {\n  scriptLoaderItems.forEach(handleClientScriptLoad);\n  addBeforeInteractiveToCache();\n}\nfunction Script(props) {\n  const {\n    id,\n    src = \"\",\n    onLoad = () => {},\n    onReady = null,\n    strategy = \"afterInteractive\",\n    onError,\n    stylesheets,\n    ...restProps\n  } = props;\n  // Context is available only during SSR\n  const {\n    updateScripts,\n    scripts,\n    getIsSsr,\n    appDir,\n    nonce\n  } = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n  /**\n  * - First mount:\n  *   1. The useEffect for onReady executes\n  *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n  *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n  *   3. The useEffect for loadScript executes\n  *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n  *      Once the script is loaded, the onLoad and onReady will be called by then\n  *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n  *   5. The useEffect for onReady executes again\n  *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n  *   7. The useEffect for loadScript executes again\n  *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n  *\n  * - Second mount:\n  *   1. The useEffect for onReady executes\n  *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n  *      onReady is called, set hasOnReadyEffectCalled.current to true\n  *   3. The useEffect for loadScript executes\n  *   4. The script is already loaded, loadScript bails out\n  *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n  *   5. The useEffect for onReady executes again\n  *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n  *   7. The useEffect for loadScript executes again\n  *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n  */\n  const hasOnReadyEffectCalled = (0, _react.useRef)(false);\n  (0, _react.useEffect)(() => {\n    const cacheKey = id || src;\n    if (!hasOnReadyEffectCalled.current) {\n      // Run onReady if script has loaded before but component is re-mounted\n      if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n        onReady();\n      }\n      hasOnReadyEffectCalled.current = true;\n    }\n  }, [onReady, id, src]);\n  const hasLoadScriptEffectCalled = (0, _react.useRef)(false);\n  (0, _react.useEffect)(() => {\n    if (!hasLoadScriptEffectCalled.current) {\n      if (strategy === \"afterInteractive\") {\n        loadScript(props);\n      } else if (strategy === \"lazyOnload\") {\n        loadLazyScript(props);\n      }\n      hasLoadScriptEffectCalled.current = true;\n    }\n  }, [props, strategy]);\n  if (strategy === \"beforeInteractive\" || strategy === \"worker\") {\n    if (updateScripts) {\n      scripts[strategy] = (scripts[strategy] || []).concat([{\n        id,\n        src,\n        onLoad,\n        onReady,\n        onError,\n        ...restProps\n      }]);\n      updateScripts(scripts);\n    } else if (getIsSsr && getIsSsr()) {\n      // Script has already loaded during SSR\n      LoadCache.add(id || src);\n    } else if (getIsSsr && !getIsSsr()) {\n      loadScript(props);\n    }\n  }\n  // For the app directory, we need React Float to preload these scripts.\n  if (appDir) {\n    // Injecting stylesheets here handles beforeInteractive and worker scripts correctly\n    // For other strategies injecting here ensures correct stylesheet order\n    // ReactDOM.preinit handles loading the styles in the correct order,\n    // also ensures the stylesheet is loaded only once and in a consistent manner\n    //\n    // Case 1: Styles for beforeInteractive/worker with appDir - handled here\n    // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet\n    // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here\n    // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function\n    if (stylesheets) {\n      stylesheets.forEach(styleSrc => {\n        _reactdom.default.preinit(styleSrc, {\n          as: \"style\"\n        });\n      });\n    }\n    // Before interactive scripts need to be loaded by Next.js' runtime instead\n    // of native <script> tags, because they no longer have `defer`.\n    if (strategy === \"beforeInteractive\") {\n      if (!src) {\n        // For inlined scripts, we put the content in `children`.\n        if (restProps.dangerouslySetInnerHTML) {\n          // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n          restProps.children = restProps.dangerouslySetInnerHTML.__html;\n          delete restProps.dangerouslySetInnerHTML;\n        }\n        return /*#__PURE__*/(0, _jsxruntime.jsx)(\"script\", {\n          nonce: nonce,\n          dangerouslySetInnerHTML: {\n            __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([0, {\n              ...restProps,\n              id\n            }]) + \")\"\n          }\n        });\n      } else {\n        // @ts-ignore\n        _reactdom.default.preload(src, restProps.integrity ? {\n          as: \"script\",\n          integrity: restProps.integrity\n        } : {\n          as: \"script\"\n        });\n        return /*#__PURE__*/(0, _jsxruntime.jsx)(\"script\", {\n          nonce: nonce,\n          dangerouslySetInnerHTML: {\n            __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([src, {\n              ...restProps,\n              id\n            }]) + \")\"\n          }\n        });\n      }\n    } else if (strategy === \"afterInteractive\") {\n      if (src) {\n        // @ts-ignore\n        _reactdom.default.preload(src, restProps.integrity ? {\n          as: \"script\",\n          integrity: restProps.integrity\n        } : {\n          as: \"script\"\n        });\n      }\n    }\n  }\n  return null;\n}\nObject.defineProperty(Script, \"__nextScript\", {\n  value: true\n});\nconst _default = Script;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["exports","handleClientScriptLoad","initScriptLoader","_","require","_requestidlecallback","ScriptCache","Map","LoadCache","Set","ignoreProps","insertStylesheets","stylesheets","_reactdom","default","preinit","forEach","stylesheet","as","window","head","document","link","createElement","type","rel","href","appendChild","loadScript","props","src","id","onLoad","onReady","dangerouslySetInnerHTML","children","strategy","onError","cacheKey","has","add","get","then","afterLoad","el","loadPromise","Promise","resolve","reject","e","call","innerHTML","__html","textContent","Array","isArray","join","set","k","value","Object","entries","undefined","includes","attr","_headmanager","DOMAttributeNames","toLowerCase","setAttribute","body","addEventListener","requestIdleCallback","loadLazyScript","readyState","addBeforeInteractiveToCache","querySelectorAll","script","getAttribute","scriptLoaderItems","Script","restProps","updateScripts","scripts","getIsSsr","appDir","nonce","_react","useContext","_headmanagercontextsharedruntime","HeadManagerContext","hasOnReadyEffectCalled","useRef","useEffect","current","hasLoadScriptEffectCalled","concat","styleSrc","_jsxruntime","jsx","JSON","stringify","preload","integrity","defineProperty"],"sources":["../../src/client/script.tsx"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}