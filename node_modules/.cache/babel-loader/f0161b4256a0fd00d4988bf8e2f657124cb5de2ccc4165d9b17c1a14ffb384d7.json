{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\e-billing\\\\src\\\\components\\\\BillingOperations.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BillingOperations = () => {\n  _s();\n  const history = useHistory();\n  const [selectedOption, setSelectedOption] = useState(null);\n  // State to manage the selected option\n\n  // Options for the dropdown\n  const options = ['Option 1', 'Option 2', 'Option 3'\n  // Add more options as needed\n  ];\n\n  // Function to handle option selection\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n    // Perform the desired action based on the selected option\n    // For now, let's just log it to the console\n    console.log(`Selected: ${option}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select an option:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedOption,\n      onChange: e => handleOptionSelect(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"Choose an option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected option: \", selectedOption]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(BillingOperations, \"qB/KrgBDxwxTO1q++6q26b4ovTU=\", false, function () {\n  return [useHistory];\n});\n_c = BillingOperations;\nexport default BillingOperations;\nvar _c;\n$RefreshReg$(_c, \"BillingOperations\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","BillingOperations","_s","history","selectedOption","setSelectedOption","options","handleOptionSelect","option","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","map","index","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/e-billing/src/components/BillingOperations.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst BillingOperations = () => {\r\n  const history = useHistory();\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  // State to manage the selected option\r\n\r\n  // Options for the dropdown\r\n  const options = [\r\n    'Option 1',\r\n    'Option 2',\r\n    'Option 3',\r\n    // Add more options as needed\r\n  ];\r\n\r\n  // Function to handle option selection\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n    // Perform the desired action based on the selected option\r\n    // For now, let's just log it to the console\r\n    console.log(`Selected: ${option}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label>Select an option:</label>\r\n      <select\r\n        value={selectedOption}\r\n        onChange={(e) => handleOptionSelect(e.target.value)}\r\n      >\r\n        <option value=\"\" disabled>\r\n          Choose an option\r\n        </option>\r\n        {options.map((option, index) => (\r\n          <option key={index} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      <p>Selected option: {selectedOption}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BillingOperations;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGL,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC1D;;EAEA;EACA,MAAMS,OAAO,GAAG,CACd,UAAU,EACV,UAAU,EACV;EACA;EAAA,CACD;;EAED;EACA,MAAMC,kBAAkB,GAAIC,MAAM,IAAK;IACrCH,iBAAiB,CAACG,MAAM,CAAC;IACzB;IACA;IACAC,OAAO,CAACC,GAAG,CAAE,aAAYF,MAAO,EAAC,CAAC;EACpC,CAAC;EAED,oBACER,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAO;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAChCf,OAAA;MACEgB,KAAK,EAAEZ,cAAe;MACtBa,QAAQ,EAAGC,CAAC,IAAKX,kBAAkB,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAL,QAAA,gBAEpDX,OAAA;QAAQgB,KAAK,EAAC,EAAE;QAACI,QAAQ;QAAAT,QAAA,EAAC;MAE1B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRT,OAAO,CAACe,GAAG,CAAC,CAACb,MAAM,EAAEc,KAAK,kBACzBtB,OAAA;QAAoBgB,KAAK,EAAER,MAAO;QAAAG,QAAA,EAC/BH;MAAM,GADIc,KAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAETf,OAAA;MAAAW,QAAA,GAAG,mBAAiB,EAACP,cAAc;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAACb,EAAA,CAzCID,iBAAiB;EAAA,QACLH,UAAU;AAAA;AAAAyB,EAAA,GADtBtB,iBAAiB;AA2CvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}